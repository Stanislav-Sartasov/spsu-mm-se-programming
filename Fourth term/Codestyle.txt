1. Оформление задач в целом

1.1. Все файлы исходников коммитятся вместе с необходимыми скриптами компиляции или файлами проектов (make-файлы, .csproj, .sln и т.п.).
1.2. Коммитить промежуточные и окончательные результаты компиляции запрещено.
1.3. Задачи размещаются по отдельным папкам.
1.4. Символы, допустимые в именах файлов - это латинские буквы, цифры и знак подчёркивания.
1.5. Название папки и проекта соответствует задаче (Task1 или MersennePrimes - Ок, YaSdelyal - нет).
1.6. Название файлов проекта соответствует логике задачи (main.c, hash.h - Ок, a.c, nado.h - нет).
1.7. Коммиты в GIT сопровождаются содержательными комментариями ("Добавлено решение задачи 2", "В задаче 3 исправлена ошибка с переполнением буфера", "Task 4 updated with better user input handling" - Ок, "Fix", "АААААААА", "Исправил" - нет).

2. Оформление кода

2.1. В дефайнах используются заглавные буквы и знаки подчёркивания.
2.2. Между определениями методов, свойств и различными компонентами классов одна пустая строка.
2.3. Фигурные скобки: 
	- С#: единственные на строке. Других символов на этой же строке кроме отступов быть не должно.
	- JVM: следуют нотации "Egyptian brackets"
2.4. Отступы в файлах - символы табуляции, в IDE отображаются как 4 пробела.
2.5. У любого бинарного оператора ставится по пробелу с обеих сторон.
2.6. После запятой ставится пробел.
2.7. Между кодом и символом комментария // или /* как минимум один пробел.
2.8. Выводимые на экран строковые константы пишутся на английском языке и следуют правилам английской грамматики.
2.9. Фрагменты кода более 1 строки, повторяющиеся 3 и более раз, выносятся в отдельный метод. В случае, если строка одна или повторов меньше, это остаётся на усмотрение автора.
2.10. Названия следуют стилю согласно выбранному языку:
	- C#: UpperCamelCase для названий классов, структур, делегатов, методов, свойств, публичных и статических членов, LowerCamelCase для всего остального
	- JVM: UpperCamelCase для названий классов, LowerCamelCase для всего остального.
	- Kotlin: https://kotlinlang.org/docs/coding-conventions.html
2.11. Допустимо создание статических классов, но только для алгоритмов общего назначения.
2.12. Если алгоритм достаточно нетривиален, следует оставлять комментарии к фрагментам программы и объявленным переменным.
2.13. Оставлять глупые или бессмысленные названия переменных, комментарии и выводы программы - себе дороже.
2.14. if (boolVariable == true) или if (boolVariable == false) - непрофессионально.
2.15. В одном файле один класс/структура/перечисление. Вложенные классы запрещены.
2.16. Название класса, переменной, поля или свойства - это название сущности, а не, например, действия.
2.17. Название метода - это название действия, а не, на\пример, сущности.
2.18. Цифры в названии сущности, поля или метода приемлемы только в случае, если они были в стандарте на эту сущность, поле или действие с ними в методе (например, X.509, 802.11n и т.д.)

3. Логика задачи

3.1. Статические переменные - зло всюду. Используйте на свой страх и риск.
3.2. При наличии консольного вывода в начале работы программа выводит в консоль, что она делает.
3.3. Если программе нужен ввод от пользователя, перед запросом ввода она сообщает, что именно она хочет получить.
3.4. После ввода от пользователя программа проверяет соответствие ввода своим ожиданиям. Ошибки ввода должны быть обнаружены, и в этом случае должно выдаваться описание ошибки и повторное приглашение на ввод.
3.5. Все методы всех классов программы должны быть покрыты юнит-тестами.
3.6. Обязательно использование средств оценки покрытия кода:
	- Java: JaCoCo (интеграция через Gradle-задачи)
	- Kotlin: Kover (интеграция через Gradle-задачи)
	- C#: dotCover или штатные средства MSVS2022 Enterprise