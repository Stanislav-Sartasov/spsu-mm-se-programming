Описание возможностей интерпретатора:
• команда echo.
	echo <args> - вывод на экран аргументов
• команда exit.
	exit - выход из интерпретатора. Игнорирует аргументы.
• команда pwd.
	pwd - вывод на экран текущей рабочей директории. Игнорирует аргументы.
• команда cd.
	cd <путь до новой директории> - перемещение текущего рабочего каталога по указанному пути.
Поддерживает абсолютные и относительные пути. Для относительных путей поддерживает .. - переход
по иерархии вверх на одну папку. Например: cd ../../folder
• команда ls.
	ls - список файлов и папок в текущей рабочей директории;
	ls <путь до директории> - список файлов и папок в директории по указанному пути. Поддерживает
абсолютные и относительные пути. Для относительных путей поддерживает .. - переход по иерархии вверх
на одну папку.
• команда cat.
	cat <имена файлов (пути до файлов) через пробел> - выводит на экран содержимое указанных
файлов. При указании имени программа ищет файл в текущей рабочей директории, при указании пути -
ищет файл по указанному пути. В режиме конвеера выводит на экран строку, переданную от предыдущей
команды.
• команда wc.
	wc <имена файлов (пути до файлов) через пробел> - выводит на экран количество строк, слов и
байт в файле для указанных файлов. При указании имени программа ищет файл в текущей рабочей директории,
при указании пути - ищет файл по указанному пути. В режиме конвеера считает количество строк, слов и
байт в строке, переданной от предыдущей команды.
• инициализация переменной.
	<имя переменной>=<значение> - добавляет локальную переменную сессии с соответствующим именем и
значением. Перед добавлением имя и значение вылидируются.
• использование локальных переменных сессии.
	$<имя переменной> - подставляется значение переменной, если такая существует, и заменяется пустой
строкой иначе. Например: echo "Hi, $name!"
• особенности кавычек.
	Как и в настойщем Bash'е, имя переменной подставляется во всех случаях, кроме одинарных кавычек.
Например: echo 'Hi, $name!' => Hi, $name!
• экранирование символов.
	Для экранирования используется спец. символ "\". Например: 
path=Task\ 2/folder
echo $path => Task 2/folder
• доступ к системным переменным.
	Программа предоставляет доступ к системным переменным. Например: echo $PATH
• особенности подстановки переменных.
	Переменные подставляются в введенную строку сразу, поэтому содержащаяся в какой-то переменной
команда, как и в настоящем Bash'е, может быть исполнена. Например:
a='echo 123'
$a
=> 123
• запуск сторонних программ. 
	Если интерпретатор не обнаружил известную ему команду, он начинает поиск соответствующего
исполняемого файла и в случае, если такой был найден, пытается его запустить. Поэтому программа
позволяет запускать, например, блокнот или калькулятор, исполнять python-программы, известные
операционной системе команды, такие как whoami, и так далее.
• конвейерная обработка команд.
	Интерпретатор поддерживает конвейерную обработку команд. В этом случае результат выполнения одной
команды становится входом для другой. При этом на экран выводятся только результат работы последней
команды и все полученные ошибки (то есть от всех исполненных команд), если таковые возникли. Например:
echo qwerty | cat | wc => 1    1    6
