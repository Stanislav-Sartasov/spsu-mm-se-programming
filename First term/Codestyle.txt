1. Оформление задач в целом

1.1. Все файлы исходников коммитятся вместе с необходимыми скриптами компиляции или файлами проектов (make-файлы, .vcxproj и т.п.).
1.2. Коммитить промежуточные и окончательные результаты компиляции запрещено.
1.3. Задачи размещаются по отдельным папкам.
1.4. Символы, допустимые в именах файлов - это латинские буквы, цифры и знак подчёркивания.
1.5. Название папки и проекта соответствует задаче (Task1 или MersennePrimes - Ок, YaSdelyal - нет).
1.6. Название файлов проекта соответствует логике задачи (main.c, hash.h - Ок, a.c, nado.h - нет).
1.7. Коммиты в GIT сопровождаются содержательными комментариями ("Добавлено решение задачи 2", "В задаче 3 исправлена ошибка с переполнением буфера", "Task 4 updated with better user input handling" - Ок, "Fix", "АААААААА", "Исправил" - нет).

2. Оформление кода

2.1. В дефайнах используются заглавные буквы и знаки подчёркивания.
2.2. Между определениями функций и после директив препроцессора - как минимум одна пустая строка.
2.3. Фигурные скобки - единственные на строке. Других символов на этой же строке кроме отступов быть не должно.
2.4. Отступы в файлах - символы табуляции, в IDE отображаются как 4 пробела.
2.5. У любого бинарного оператора ставится по пробелу с обеих сторон.
2.6. После запятой ставится пробел.
2.7. Между кодом и символом комментария // или /* как минимум один пробел.
2.8. Выводимые на экран строковые константы пишутся на английском языке и следуют правилам английской грамматики.
2.9. Фрагменты кода более 1 строки, повторяющиеся 3 и более раз, выносятся в отдельную функцию. В случае, если строка одна или повторов меньше, это остаётся на усмотрение автора.
2.10. Названия функций, структур и переменных в рамках одной задачи следуют одному из стилей:
	- начинается со строчной буквы, в имени могут фигурировать и буквы, и цифры, но каждое новое слово в названии начинается с заглавной буквы;
	- начинаются со строчной буквы, в имени фигурируют только строчные буквы и знаки подчёркивания между отдельными словами.
2.11. Функция main имеет тип int и возвращает 0, если не было ошибок, мешающих штатному завершению.
2.12. Константы вполне можно определять на глобальном уровне.
2.13. Если алгоритм достаточно нетривиален, следует оставлять комментарии к фрагментам программы и объявленным переменным.
2.14. Оставлять глупые или бессмысленные названия переменных, комментарии и выводы программы - себе дороже.
2.15. Заголовочные файлы .H содержат только объявления типов, объявления функций, макросы общего назначения и контанты. Определения функций всегда содержатся в файлах .С.
2.16. if (boolVariable == true) или if (boolVariable == false) - непрофессионально.

3. Логика задачи

3.1. Глобальные переменные - зло всюду, кроме Менеджера памяти (для указателя на структуры управления памятью) и, возможно, Фильтров (для хранения фильтров).
3.2. В начале работы программа выводит в консоль, что она делает (вычисляет цифровой корень, простые числа Мерсенна и т.д.).
3.3. Если программе нужен ввод от пользователя, перед запросом ввода она сообщает, что именно она хочет получить (второе число пифагоровой тройки, сумму для английских монет и т.д.).
3.4. После ввода от пользователя программа проверяет соответствие ввода своим ожиданиям. Ошибки ввода должны быть обнаружены, и в этом случае должно выдаваться описание ошибки и повторное приглашение на ввод.
